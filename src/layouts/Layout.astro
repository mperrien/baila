---
import "@/styles/main.scss";

interface Props {
  title: string;
  description: string;
  image?: URL | string;
}

const { title, description, image } = Astro.props;
const t = `${title} Â· baila.perrien.fr`;
let canonical = new URL(Astro.url.pathname, Astro.site);
const img = new URL(
  Astro.props.image || "https://baila.perrien.fr/baila-social.png",
  Astro.site,
);
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{t}</title><meta name="description" content={description} />
    <meta name="theme-color" content="#da0808" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="mask-icon" href="/favicon.svg" color="#efdf0b" />
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={canonical} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={img} />
    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={canonical} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={img} />
  </head>
  <body>
    <slot />
  </body>
</html>

<style is:global lang="scss">
  :root {
    --background-color: var(--almost-black);
  }

  html,
  body {
    margin: 0;
    width: 100%;
    height: 100%;
  }

  html {
    // 1rem = 10px
    font-size: 62.5%;
  }

  body {
    background-color: var(--background-color);

    color: var(--text-color);
    font-family: var(--body-font);
    font-size: var(--base-font-size); // 1.6rem = 16px
    font-weight: 400;
    line-height: 1.5;

    ::selection {
      background-color: var(--orange-dim);

      color: var(--text-color-bright);
    }
  }

  .grid {
    display: grid;
    grid-template-columns:
      max(calc(50vw - (var(--max-width) / 2)), var(--space-small))
      repeat(12, 1fr)
      max(calc(50vw - (var(--max-width) / 2)), var(--space-small));

    @media (min-width: 54rem) {
      gap: var(--space-small);
    }

    @media (min-width: 72rem) {
      gap: var(--space-medium);
    }
  }
</style>
